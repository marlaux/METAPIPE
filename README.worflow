The main purpose of this repository is to help structure and organize the Metabarcoding pipeline, with special care to build scripts as user friendly as possible. 
Another goal is to include more than one method for each step, in order to finally provide more than one pipeline branch.

The scripts are presented as a chain of commands in step by step mode, along with wrapped scripts formatted to run in job queue or interactively using srun (scripts with flags).
You can choose to run command by command, using independent little scripts, or using the wrapped scripts, allowing the user to view a help page and select the inputs dinamically.

The wrapped mode performs the same tasks and generate the same outputs necessary for the chain connection, however, they only works in interactively session, allocating 
resources to work in command line using srun:
srun --ntasks=1 --mem-per-cpu=8G --time=01:00:00 --qos=devel --account=nn9623k --pty bash -i

There is specific chained scripts planned to run as slurm job scripts. The mode of use of each script is described in each README step. 

The step by step mode, on the other hand, runs each step and each script one after another. It is a good choice when your goal is to have a closer look to your outputs and what 
is been done in each step. The step by step mode takes a longer time to run, because for each job you go back to the queue, but provides a deeper knowledge about the 
Metabarcoding data processing, since the user must know not only the inputs and outputs, but also de intermediary files generated throughout the pipeline and why.

STEP BY STEP WORKFLOW 		
1.merge_pear.sh	in: R1.fastq + R2.fastq out: .assembled.fastq
2.'perl preparing_tags_LCPI.pl barcodes.txt' in: tab separated 3 columns barcodes.txt [sampleID \t tagF \t tagR] out: tags files in cutadapt format
3.demulti_dual_index_linked.sh	in: .assembled.fastq + cutadapt formatted tags 	out: individual samples
4.tag_primer_clipping_part1.sh	in: demultiplexed fastq samples	out: clipped and trimmed tags and primers
4.read_trim.sh	in: clipped fastq samples	out: trimmed and header formatted fastq		
5.convert2fasta.sh	in: clip/formatted fastq	out: clip/formatted fasta		
6.extract_quality.sh	in: clip/formatted fastq 	out: quality text with error rate and length
7.dereplicate_by_sample.sh	in: clip/formatted fasta 	out: dereplicated samples
8.global_dereplication.sh	in: dereplicated samples	out: concatenated globally dereplicated multifasta
9.clustering_swarm.sh	in: concatenated globally dereplicated multifasta	out: representatives/struct/swarms/uchime
10.sort_representatives.sh	in: _1f_representatives.fas		out: _2f_representatives.fas
11.chimera_checking.sh	in: _1f_representatives.fas		out: in: _1f_representatives.uchime		
12.clustering_swarm_complete.sh	in: dereplicated samples	out: representatives/struct/swarms/uchime and concat global derep multifasta

FOR NCBI LOCAL ALIGNMENT STRATEGIES
13 ./EntrezDirect.sh -h		out: my_search_esearch.fasta
##################################################
Download reference sequences in fasta format.
Entrez Direct NCBI command line tools

Usage: ./EntrezDirect.sh [-d nuccore|protein] [-q gene] [-t taxa] [-o output]
-d     NCBI database: 'nuccore' (nucleotide) or 'protein'
-q     Entrez search terms: 'COI [gene]' or 'Internal transcribed spacer'
-t     Expected taxonomic target: 'Arthropoda [ORGN]' or 'plants [ORGN]'
-o     Name for the local database.
-h     Print this Help.
##################################################

14 ./format_NCBI2lineages_auto.sh -h 	out: my_refs.uniq.fasta
##################################################
Format and include taxonomic lineage in reference
sequences headers downloaded from NCBI taxonomy.
This script will generate a multifasta file which
will be the input for makeblastdb to build your
local database to run in BLAST.

Usage: ./format_NCBI2lineages_auto.sh [-r fasta] [-p output_prefix]
-r     references_downloaded_fromNCBI.fasta
-p     prefix to output filenames
-h     Print this Help.
##################################################

15 BLAST.sh --> script working but ugly, flagging it soon
in: _2f_representatives.fas/my_refs.uniq.fasta		out: your_project_local_blast.tab

16 perl Blast_results_format.pl --> format BLAST output to work in OTU table and stampadapt.sh
in: your_project_local_blast.tab		out: Blast_results_formatted2OTUtable.tab

17. .. in progress
